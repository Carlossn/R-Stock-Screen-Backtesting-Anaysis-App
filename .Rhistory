#xpath = '//tr[@itemprop="reviews"]/td[2]/div'  # see below xpath syntax translation:
# I discover that output is the same doing //tr[@itemprop="reviews"]
# //    => If the path starts with // then all elements in the document which fulfill following criteria are selected.
# tr[]  => tr = finds a child table row that meets @itemprop="reviews"
# @     => Selects attributes
# @itemprop='reviews' => find elements named 'reviews'
# td[2]  => table column number 2
# /div  => defines a division or a section in an HTML
# XPath: query language for selecting nodes from an XML document:
# http://www.w3schools.com/xml/xml_xpath.asp
# http://www.w3schools.com/xml/xpath_intro.asp
# http://www.w3schools.com/xml/xpath_syntax.asp
nodes = getNodeSet(data, xpath) # find XML nodes that match a particular criterion
text = sapply(nodes, xmlValue) #xmlvalue= Extracts or set the contents of a leaf XML node containing text
text
mpg
mpg
mpg
library()
data()
library(ggplot2)
mpg
g + geom_point()
g <-  ggplot(data = mpg, aes(x = displ, y = hwy), fill=class)
g + geom_point()
g <-  ggplot(data = mpg, aes(x = displ, y = hwy, fill=class)
g + geom_point()
g <-  ggplot(data = mpg, aes(x = displ, y = hwy, fill=class)
g + geom_point()
g <-  ggplot(data = mpg, aes(x = displ, y = hwy, fill=class))
g + geom_point()
g + geom_point()
g + geom_point(aes(fill=class))
g <-  ggplot(data = mpg, aes(x = displ, y = hwy))
g + geom_point(aes(fill=class))
g + geom_point(aes(color=class))
g + geom_point(aes(fill=class))
g + geom_point(aes(color=class))
g + geom_point(aes(shape=class)) # scaterplott using different colors per class
g + geom_point(aes(size=class)) # scaterplott using different shapes per class => very confusing
g + geom_point(aes(size=class, color=class)) # scaterplott using different sizes per class => very confusingand sizes chosen using name alphabetic order
g + geom_point()+facetgrid() # scaterplott using different sizes/colors per class => very confusingand sizes chosen using name alphabetic order
g + geom_point()+facet_grid() # scaterplott using different sizes/colors per class => very confusingand sizes chosen using name alphabetic order
g + geom_point()+facet_grid(.~cyl) # scaterplott using different sizes/colors per class => very confusingand sizes chosen using name alphabetic order
g + geom_point()+facet_grid(cyl~.) # scaterplott using different sizes/colors per class => very confusingand sizes chosen using name alphabetic order
g + geom_point()+facet_grid(cyl~class) # scaterplott using different sizes/colors per class => very confusingand sizes chosen using name alphabetic order
head(mpg)
g + geom_point(aes(color=manufacturer))+facet_grid(cyl~class) # multiple scaterplots filtered by a 3rd variable
g + geom_smooth()
g + geom_smooth(aes(color=class))
g + geom_smooth()
g + geom_point(aes(alpha=class)) # scaterplott using different shapes per class => very confusing
g + geom_smooth()
g + geom_smooth(aes(color=class), se=F )
g + geom_smooth(aes(color=class)) # 1 regression per subset using 'class' variable
g + geom_smooth(method='lm') # regression line using loess method (data-fitting model)
g + geom_smooth() # regression line using loess method (data-fitting model => quadratic model this time)
g + geom_boxplot()
g + geom_boxplot(aes(color=class))
g + geom_boxplot(aes(color=class)) +facet_grid()
g + geom_boxplot(aes(color=class)) +facet_grid((aes=class))
g + geom_boxplot(aes(color=class)) +facet_grid(.~class
g + geom_boxplot(aes(color=class)) +facet_grid(.~class)
g + geom_boxplot(aes(color=class)) + facet_grid(.~class)
g + geom_boxplot(aes(color=class)) + facet_grid(.~class)
g + geom_boxplot(aes(color=class)) + facet_grid(.~class)
g + geom_boxplot() + facet_grid(.~class)
ggplot(data = mpg, aes(x = reorder(class, hwy, median), y = hwy)) + geom_boxplot() #reorder by median
ggplot(data = mpg, aes(x = reorder(class, hwy, median), y = hwy)) + geom_boxplot() #reorder by median
g1 <- ggplot(data = mpg, aes(x = reorder(class, hwy, median), y = hwy))
g1 + geom_boxplot()
g1 <- ggplot(data = mpg, aes(x = reorder(class, hwy, median), y = hwy))
mpg
g1 <- ggplot(data = mpg, aes(x = reorder(class, hwy, median), y = hwy))
ggplot(data = mpg, aes(x = reorder(class,  hwy), y = hwy)) + geom_boxplot()
g + geom_boxplot() + facet_grid(.~class) #boxplots per class
ggplot(data = mpg, aes(x = reorder(class,  hwy), y = hwy)) + geom_boxplot()
ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = cut)) #bar chart differentiating by "cut"
diamonds
ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = cut)) #bar chart differentiating by "cut"
ggplot(data = diamonds,aes(x = cut)) + geom_bar(aes(fill = cut))
ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = cut)) #bar chart differentiating by "cut"
library(gcookbook)
library(ggplot2)
library(reshape2)
ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = cut)) #bar chart differentiating by "cut"
ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = cut)) #bar chart differentiating by "cut"
head(diamonds)
ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = cut)) #bar chart differentiating by "cut"
ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = cut)) +
scale_fill_brewer(palette="Spectral")
gx <- ggplot(data = diamonds, aes(x = cut))
gx + geom_bar(aes(fill = cut))
gx <- ggplot(data = diamonds, aes(x = cut))
library(ggplot2)
ggplot(data = mpg, aes(x = reorder(class,  hwy), y = hwy)) + geom_boxplot()
ggplot(data = diamonds,aes(x = cut)) + geom_bar(aes(fill = cut))
ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = cut)) #bar chart differentiating by "cut"
a <- 12
b <- 2
i= min(c(a,b))
while (i>0){if(a %%i == 0 & b %% i == 0){cat('The greatest common divisor is',i)} else{
i-1
}
}
i <- seq(3,0,-1)
i
i= min(c(a,b))
x
x <- seq(i,1,-1)
x
for (i in x){if(a %%i == 0 & b %% i == 0){cat('The greatest common divisor is',i)} else{
i-1
}
}
a <- 12
b <- 4
i= min(c(a,b))
x <- seq(i,2,-1)
for (i in x){if(a %%i == 0 & b %% i == 0){cat('The greatest common divisor is',i)} else{
i-1
}
}
gcm <- c()
rm(list=ls())
test <- c(1)
test <- c(test,1)
test
a <- 12
b <- 4
i= min(c(a,b))
x <- seq(i,2,-1)
gcm <- c()
for (i in x){if(a %%i == 0 & b %% i == 0){gcmc <- c(gcm,i)} else{
i-1
}
}
max(gcm)
Max(gcm)
test <- c(1)
test <- c(test,2)
max(test)
gcm
a <- 12
b <- 4
i= min(c(a,b))
x <- seq(i,2,-1)
gcm <- c()
for (i in x){if(a %%i == 0 & b %% i == 0){gcm <- c(gcm,i)} else{
i-1
}
}
gcm
gcdIter <- function(a, b){
i= min(c(a,b))
x <- seq(i,2,-1)
gcm <- c()
for (i in x){if(a %%i == 0 & b %% i == 0){gcm <- c(gcm,i)} else{
i-1
}
}
max(gcm)
}
a <- 12
b <- 4
gcdIter(a,b)
a <- 1
b <- 1
gcdIter(a,b)
gcdIter <- function(a, b){
i= min(c(a,b))
x <- seq(i,1,-1)
gcm <- c()
for (i in x){if(a %%i == 0 & b %% i == 0){gcm <- c(gcm,i)} else{
i-1
}
}
max(gcm)
}
a <- 1
b <- 1
gcdIter(a,b)
rm(list=ls())
x^(1/2)
x=0
x^(1/2)
x=4
x^(1/2)
root <- function(x){
if(x>=0){x^(1/2)} else {
'Please enter a positive number'
}
}
x=4
root(x)
x=-4
root(x)
root <- function(x){
if(x>=0){x^(1/2)} else {
NaN
}
}
x=-4
root(x)
city <- c('ny','ny','mad','mad','lon')
country <- c('us','us','sp','sp','uk')
temp <- c(13,14,14,16,16)
pop <-c(c(23,24,124,26,26))
citemp <- data.frame(city,country,temp,pop,stringsAsFactors = FALSE)
citemp
by_country <- group_by(citemp,country)
library(dplyr)
by_country <- group_by(citemp,country)
summarize(by_country, avg = mean(pop)) #right result
summarize(by_country, avg = mean(pop)) #right result
summarize(by_country, avg = mean(pop)) #right result
summarize(by_country, avg = mean(eval(parse(text = 'pop')))) #wrong: same mean per country
summarize(citemp, mean(pop))
summarize(citemp, avg = mean(eval(parse(text = 'pop')))) #wrong: same mean per country
summarize(citemp, mean(pop))
summarize_(by_country, 'mean(pop)') # can't be used in shiny
summarize(by_country, avg = mean(pop)) #right result
summarize(by_country, mean = paste0('mean(',input,'na.rm=TRUE)'))
input = 'pop'
summarize(by_country, mean = paste0('mean(',input,'na.rm=TRUE)'))
summarize_(by_country, mean = paste0('mean(',input,'na.rm=TRUE)'))
summarize_(by_country, paste0('mean(',input,',na.rm=TRUE)'))
shiny::runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
shiny::runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
runApp('C:/Users/Carlo/Desktop/BACKUP/CODING/NYC DATA SCIENCE ACADEMY/Project 1 - Shiny/app')
setwd('C:\\Users\\Carlo\\Desktop\\BACKUP\\CODING\\NYC DATA SCIENCE ACADEMY\\Project 1 - Shiny\\app') #delete setwd once app is done
df <- read.csv('turnaround_data.csv', stringsAsFactors = FALSE)
df_rl <- na.exclude(df) %>% summarize(
prob_1y = sum(tr_1y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_1.5y = sum(tr_1.5y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_2y = sum(tr_2y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_2.5y = sum(tr_2.5y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_3y = sum(tr_3y>0 & tr_0.5y<0, na.rm = TRUE)/n()
)
df_rw <- na.exclude(df) %>% summarize(
prob_1y = sum(tr_1y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(tr_1.5y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(tr_2y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(tr_2.5y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(tr_3y>0 & tr_0.5y>0, na.rm = TRUE)/n()
)
df_al <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y<0, na.rm = TRUE)/n()
)
dft_aw <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y>0, na.rm = TRUE)/n()
)
library(shiny)
library(ggplot2)
library(RColorBrewer)
library(tibble)
library(DT)
library(tidyr)
library(dplyr)
library(magrittr)
df <- read.csv('turnaround_data.csv', stringsAsFactors = FALSE)
df_rl <- na.exclude(df) %>% summarize(
prob_1y = sum(tr_1y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_1.5y = sum(tr_1.5y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_2y = sum(tr_2y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_2.5y = sum(tr_2.5y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_3y = sum(tr_3y>0 & tr_0.5y<0, na.rm = TRUE)/n()
)
df_rw <- na.exclude(df) %>% summarize(
prob_1y = sum(tr_1y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(tr_1.5y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(tr_2y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(tr_2.5y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(tr_3y>0 & tr_0.5y>0, na.rm = TRUE)/n()
)
df_al <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y<0, na.rm = TRUE)/n()
)
dft_aw <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y>0, na.rm = TRUE)/n()
)
dft_aw <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y>0, na.rm = TRUE)/n()
)
df_aw <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y>0, na.rm = TRUE)/n()
)
df_rl
df_rw
df_al
df_aw
rbind(df_al,df_aw)
levels(rbind(df_al,df_aw))
vec_name <- c('negative start (first six months)','positive start (first six months')
cbind(vec_name,rbind(df_al,df_aw))
scenario <- c('negative start (first six months)','positive start (first six months')
cbind(vec_name,rbind(df_al,df_aw))
prob <- cbind(vec_name,round(rbind(df_al,df_aw),2)
prob
prob <- cbind(vec_name,round(rbind(df_al,df_aw),2))
prob
prob <- cbind(vec_name,round(rbind(df_al,df_aw),3))
prob
prob[1,]- prob[2,]
str(prob)
prob_t <- prob[1,]- prob[2,]
prob_t
prob_t <- prob[2,]- prob[1,]
prob_t
prob_t[1,1] <- 'positive start - negative start'
prob_t
scenario <- c('negative start (first six months)','positive start (first six months')
prob <- cbind(scenario,round(rbind(df_al,df_aw),3))
prob_t <- prob[2,]- prob[1,]
prob_t[1,1] <- 'positive start - negative start'
prob_t
prob_u <- rbind(prob,prob_t)
prob_u
View(prob_u)
library(corrplot) # Visualization of a Correlation Matrix
corrplot(cor(prob_u))
corrplot(cor(prob_u[,2:]))
corrplot(cor(prob_u[,2:6]))
prob_u
df <- group_by(df,sector)
df_rl <- na.exclude(df) %>% summarize(
prob_1y = sum(tr_1y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_1.5y = sum(tr_1.5y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_2y = sum(tr_2y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_2.5y = sum(tr_2.5y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_3y = sum(tr_3y>0 & tr_0.5y<0, na.rm = TRUE)/n()
)
df_rw <- na.exclude(df) %>% summarize(
prob_1y = sum(tr_1y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(tr_1.5y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(tr_2y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(tr_2.5y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(tr_3y>0 & tr_0.5y>0, na.rm = TRUE)/n()
)
df_al <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y<0, na.rm = TRUE)/n()
)
df_aw <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y>0, na.rm = TRUE)/n()
)
df_rl
df_rw
scenario <- c('negative start (first six months)','positive start (first six months')
prob <- cbind(scenario,round(rbind(df_al,df_aw),3))
prob_t <- prob[2,]- prob[1,]
prob_t[1,1] <- 'positive start - negative start'
prob_u <- rbind(prob,prob_t)
View(prob_u)
prob
df_al
df_aw
df <- read.csv('turnaround_data.csv', stringsAsFactors = FALSE)
df_rl <- na.exclude(df) %>% summarize(
prob_1y = sum(tr_1y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_1.5y = sum(tr_1.5y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_2y = sum(tr_2y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_2.5y = sum(tr_2.5y>0 & tr_0.5y<0, na.rm = TRUE)/n(),
prob_3y = sum(tr_3y>0 & tr_0.5y<0, na.rm = TRUE)/n()
)
df_rw <- na.exclude(df) %>% summarize(
prob_1y = sum(tr_1y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(tr_1.5y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(tr_2y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(tr_2.5y>0 & tr_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(tr_3y>0 & tr_0.5y>0, na.rm = TRUE)/n()
)
df_al <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y<0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y<0, na.rm = TRUE)/n()
)
df_aw <- na.exclude(df) %>% summarize(
prob_1y = sum(alpha_1y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_1.5y = sum(alpha_1.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2y = sum(alpha_2y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_2.5y = sum(alpha_2.5y>0 & alpha_0.5y>0, na.rm = TRUE)/n(),
prob_3y = sum(alpha_3y>0 & alpha_0.5y>0, na.rm = TRUE)/n()
)
df_rl
df_rw
scenario <- c('negative start (first six months)','positive start (first six months')
prob <- cbind(scenario,round(rbind(df_rl,df_rw),3))
prob_t <- prob[2,]- prob[1,]
prob_t[1,1] <- 'positive start - negative start'
prob_u <- rbind(prob,prob_t)
View(prob_u)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
